org: greedyman
app: tesseroid
service: tesseroid-functions
frameworkVersion: ">=1.34.0 <2.0.0"

plugins:
  - serverless-python-requirements
  - serverless-offline
  # - serverless-apigw-binary
provider:
  name: aws
  runtime: python3.7 #fixed with pipenv
  region: us-east-1
  memorySize: 128
  timeout: 60
  profile: aws_educate_serverless
  apiGateway:
    binaryMediaTypes:
      - 'application/zip'
      - 'application/octet-stream'

custom:
  pythonRequirements:
    usePipenv: true
    useDownloadCache: true
    useStaticCache: true
  # apigwBinary:
  #   types:           #list of mime-types
  #     - 'application/octet-stream'
  #     - 'application/zip'
  
  
functions:
  main:
    handler: handler.main
    layers:
      - arn:aws:lambda:us-east-1:260659138565:layer:layer_fast:2
      # Update this ARN after you've deployed the tesseract layer
      # - arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:layer:tesseract:1
    events:
      - http:
          path: ocr
          method: post
          integration: lambda
          request:
            passThrough: WHEN_NO_TEMPLATES
            # parameters:
            #   querystrings:
            #     lang: false
            #     config: false
            #     output_type: false
            #   headers:
            #     Content-Type: false
            template:
              application/zip: '
              {
                  "type": "zip",
                  "zip": "$input.body",
                  "lang": "$input.params(''lang'')",
                  "config": "$input.params(''config'')",
                  "output_type": "$input.params(''output_type'')"
              }'
              application/json: '
              {
                  "type": "json",
                  "image": $input.json(''$.image''),
                  "lang": "$input.params(''lang'')",
                  "config": "$input.params(''config'')",
                  "output_type": "$input.params(''output_type'')"
              }'
              application/octet-stream: '
              {
                  "type": "img_file",
                  "image": "$input.body",
                  "lang": "$input.params(''lang'')",
                  "config": "$input.params(''config'')",
                  "output_type": "$input.params(''output_type'')"
              }'
              
          response:
            # headers:
            #   Content-Type: "'application/json'"
            template: $input.path('$')
            statusCodes:
              200:
                pattern: '.*"statusCode":200,.*' # JSON response

# resources- Raw cloudformation code
# resources:
#   Resources:
#     ApiGatewayMethodOcrPost:
#     Type: AWS::ApiGateway::Method
#     Properties:
#       Integration:
#         ContentHandling: CONVERT_TO_TEXT
        
